<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
    HL -
    An example of an active mq broker configure file. This file should
    reside in $ACTIVEMQ_HOME/conf

    You can configure:
    -transport protocols
    -network protocols
    -storage type (in this example it is mysql)
    -the ssl keystore/truststore
-->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>


   <!-- Allows accessing the server log -->
    <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery"
          lazy-init="false" scope="singleton"
          init-method="start" destroy-method="stop">
    </bean>
    
    <!--
        HL
        MySql datasource setup, gets used by broker below.
        in order to use mysql you have to install 2 optional jars into $ACTIVEMQ/lib
         1. commons-dbcp2-2.1.1.jar (for java 7)
         2. myslq-connector-java-5.1.19.jar (for mysql jdbc driver)
    -->
    <bean id="mysql-ds" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true" />
        <property name="username" value="activemq" />
        <property name="password" value="activemq" />
        <!--
        <property name="maxActive" value="100" />
        -->
        <property name="poolPreparedStatements" value="true" />
    </bean>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">
        <!--
           HL
           Add support for MessageAuthorzationPolicy in the broker.
           The bean class is a custom implementation, see gitdir/jms-messaging/broker/src/...
           for the custom implementation. 
        -->
        <messageAuthorizationPolicy>
           <bean class="com.gecko.broker.security.authorization.MessageAuthorization"
                xmlns="http://www.springframework.org/schema/beans" />
        </messageAuthorizationPolicy>

        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" >
                    <!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:

                         http://activemq.apache.org/slow-consumer-handling.html

                    -->
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="1000"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>
        
        <plugins>
           <!--
           <simpleAuthenticationPlugin>
             <users>
               <authenticationUser username="admin" password="bob" groups="admins,publishers,consumers"/>
             </users> 
           </simpleAuthenticationPlugin>
           -->

           <!--
             The following is a configuration context in the $ACTIVEMQ_HOME/conf/login.config file
             that defines the built in jaas plugins. 
           -->
           <jaasAuthenticationPlugin configuration="activemq" />

           <!-- 
              HL 
              A custom built plugin for activemq that does validation of ip address. 
              Clearly ActiveMQ has support for BrokerPlugin implementations such as this class.
              This plugin class will then instantiate another class that does the desired custom behavior.
           -->
           <bean xmlns="http://www.springframework.org/schema/beans" id="ipAuthenticationPlugin"
                 class="com.gecko.broker.security.authentication.connection.IpAddressAuthenticationPlugin">
              <property name="allowedIpAddresses">
                  <list>
                       <value>127.0.0.1</value>
                  </list>
              </property>
           </bean>
        </plugins>

        <!-- 
           HL
           my own ssl certs 
        -->
        <sslContext>
          <sslContext keyStore="file:/Users/hlieu/Security/KeyStores/jms.broker.ks" keyStorePassword="jms123" />
        </sslContext>

        <!--
          HL
          Default ssl certs that come with ActiveMQ
        <sslContext>
          <sslContext keyStore="file:${activemq.base}/conf/broker.ks" keyStorePassword="password" />
        </sslContext>
        -->

        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <!--  
            Removed March 14, 2017 by haja.
            Substituting in mysql instead
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb" journalMaxFileLength="16mb"/>
        </persistenceAdapter>
        -->
        <!-- using mysql datasource -->
        <persistenceAdapter>
            <jdbcPersistenceAdapter dataSource="#mysql-ds" />
        </persistenceAdapter>


          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before disabling caching and/or slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
          -->
          <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="70" />
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="5 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" 
                uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;trace=true"
                discoveryUri="multicast://default"
            />
            <transportConnector name="ssl" uri="ssl://0.0.0.0:61618?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="nio" uri="nio://0.0.0.0:61620?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="http" uri="http://0.0.0.0:8080?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>

            <!-- disabled protocols -->
            <!-- 
            <transportConnector name="ws" uri="ws://0.0.0.0:61615?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="udp" uri="udp://0.0.0.0:6717?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="https" uri="https://0.0.0.0:1443?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            -->
        </transportConnectors>

        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos
        The web consoles requires by default login, you can disable this in the jetty.xml file

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="jetty.xml"/>

</beans>
<!-- END SNIPPET: example -->
